class C {
  constructor(x: Int) /* primary */ {
    super/*Any*/()
        /* InstanceInitializerCall */

  }




}

typealias CA = C
object Host {
  private constructor() /* primary */ {
    super/*Any*/()
        /* InstanceInitializerCall */

  }

  class Nested {
    constructor(x: Int) /* primary */ {
      super/*Any*/()
            /* InstanceInitializerCall */

    }




  }




}

typealias NA = Nested
val test1: Function1<Int, C>
  field = ::<init>
  get

val test2: Function1<Int, Nested>
  field = ::<init>
  get

