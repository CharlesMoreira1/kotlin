annotation class TestAnn : Annotation {
  constructor(x: String) /* primary */ 
  val x: String
    field = x
    get




}

@TestAnn(...)
class TestClass {
  constructor() /* primary */ {
    TODO("IrDelegatingConstructorCall")
        /* InstanceInitializerCall */

  }




}

@TestAnn(...)
interface TestInterface {



}

@TestAnn(...)
object TestObject {
  private constructor() /* primary */ {
    TODO("IrDelegatingConstructorCall")
        /* InstanceInitializerCall */

  }




}

class Host {
  constructor() /* primary */ {
    TODO("IrDelegatingConstructorCall")
        /* InstanceInitializerCall */

  }

  @TestAnn(...)
  companion object TestCompanion {
    private constructor() /* primary */ {
      TODO("IrDelegatingConstructorCall")
            /* InstanceInitializerCall */

    }




  }




}

@TestAnn(...)
enum class TestEnum : Enum<TestEnum> {
  private constructor() /* primary */ {
    TODO("IrEnumConstructorCall")
        /* InstanceInitializerCall */

  }








  fun values(): Array<TestEnum> /* Synthetic body for ENUM_VALUES */

  fun valueOf(value: String): TestEnum /* Synthetic body for ENUM_VALUEOF */

}

@TestAnn(...)
annotation class TestAnnotation : Annotation {
  constructor() /* primary */ 



}

