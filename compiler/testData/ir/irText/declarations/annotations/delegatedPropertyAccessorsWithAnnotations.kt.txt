annotation class A : Annotation {
  constructor(x: String) /* primary */ 
  val x: String
    field = x
    get




}

class Cell {
  constructor(value: Int) /* primary */ {
    TODO("IrDelegatingConstructorCall")
        /* InstanceInitializerCall */

  }

  var value: Int
    field = value
    get
    set

  operator fun getValue(thisRef: Any?, kProp: Any?): Int {
    return <this>.<get-value>()
  }

  operator fun setValue(thisRef: Any?, kProp: Any?, newValue: Int) {
    <this>.<set-value>(<set-?> = newValue)
  }




}

val test1: Int /* by */ 
  field = Cell(value = 1)
  @A(...)
  get(): Int {
    return #test1$delegate.getValue(thisRef = null, kProp = ::test1)
  }

var test2: Int /* by */ 
  field = Cell(value = 2)
  @A(...)
  get(): Int {
    return #test2$delegate.getValue(thisRef = null, kProp = ::test2)
  }
  @A(...)
  set(<set-?>: Int) {
    return #test2$delegate.setValue(thisRef = null, kProp = ::test2, newValue = <set-?>)
  }

