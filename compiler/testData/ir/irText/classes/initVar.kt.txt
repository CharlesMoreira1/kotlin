class TestInitVarFromParameter {
  constructor(x: Int) /* primary */ {
    TODO("IrDelegatingConstructorCall")
        /* InstanceInitializerCall */

  }

  var x: Int
    field = x
    get
    set




}

class TestInitVarInClass {
  constructor() /* primary */ {
    TODO("IrDelegatingConstructorCall")
        /* InstanceInitializerCall */

  }

  var x: Int
    field = 0
    get
    set




}

class TestInitVarInInitBlock {
  constructor() /* primary */ {
    TODO("IrDelegatingConstructorCall")
        /* InstanceInitializerCall */

  }

  var x: Int
    get
    set

  init {
    <this>.<set-x>(<set-?> = 0)
  }




}

class TestInitVarWithCustomSetter {
  constructor() /* primary */ {
    TODO("IrDelegatingConstructorCall")
        /* InstanceInitializerCall */

  }

  var x: Int
    field = 0
    get
    set(value: Int) {
      #x = value
    }




}

class TestInitVarWithCustomSetterWithExplicitCtor {
  var x: Int
    get
    set(value: Int) {
      #x = value
    }

  init {
    <this>.<set-x>(value = 0)
  }

  constructor() {
    TODO("IrDelegatingConstructorCall")
        /* InstanceInitializerCall */

  }




}

class TestInitVarWithCustomSetterInCtor {
  var x: Int
    get
    set(value: Int) {
      #x = value
    }

  constructor() {
    TODO("IrDelegatingConstructorCall")
        /* InstanceInitializerCall */

    <this>.<set-x>(value = 42)
  }




}

